{"ast":null,"code":"const initialState = {\n  users: [],\n  loading: true\n}; // Use the initialState as a default value\n\nconst users = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  // The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    case \"LOADING\":\n      return { ...state,\n        loading: true\n      };\n\n    case \"SET_USERS\":\n      return { ...state,\n        loading: false,\n        users: action.users\n      };\n      state.loading = false;\n      state.users = action.users;\n\n    case \"ADD_USER\":\n      // We need to return a new state object\n      return { // that has all the existing state data\n        ...state,\n        // but has a new array for the `users` field\n        users: [// with all of the old users, and the new user object\n        ...state.users, action.user]\n      };\n    // If this reducer doesn't recognize the action type, or doesn't\n    // care about this specific action, return the existing state unchanged\n\n    default:\n      return state;\n  }\n};\n\nexport default users; // REACT/REDUX flow...\n// A Component dispatches an action.\n// An Action hits the reducer.\n// The Reducer will update the state depending on the action that was dispatched.\n// The Reducer will pass the updated state to the store.\n// The Component will receive new state.\n// export default function users(state = {\n//   users: []\n// }, action) {\n//   switch (action.type) {\n//     case 'ADD_USER':\n//       return {\n//         ...state,\n//         users: [...state.users, action.user]\n//       }\n//     default:\n//       return state;\n//   }\n// };\n// case \"ADD_USER\":\n//   return {\n//     ...state,\n//     users: [...state.users, action.user],\n//   };\n// state.users.lastIndexOf(user => user.id && action.id)\n// case \"SHOW_USER\":\n//   return {\n//     ...state,\n//     users: [...state.users.slice(-1)]\n//   };\n// // frontend difficulty recognizing the user\n// case \"FETCH_USER_DETAILS\":\n//   return {\n//     id: action.user.id,\n//     email: action.user.email,\n//     username: action.user.username,\n//   };","map":{"version":3,"sources":["/Users/lesliegonzalez/Development/code/lucky-numbers-frontend/src/reducers/users.js"],"names":["initialState","users","loading","state","action","type","user"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAArB,C,CAKA;;AACA,MAAMD,KAAK,GAAG,YAAkC;AAAA,MAAjCE,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAChD;AACE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELD,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAK,WAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELD,QAAAA,OAAO,EAAE,KAFJ;AAGLD,QAAAA,KAAK,EAAEG,MAAM,CAACH;AAHT,OAAP;AAKFE,MAAAA,KAAK,CAACD,OAAN,GAAgB,KAAhB;AACAC,MAAAA,KAAK,CAACF,KAAN,GAAcG,MAAM,CAACH,KAArB;;AACA,SAAK,UAAL;AACE;AACA,aAAO,EACL;AACA,WAAGE,KAFE;AAGL;AACAF,QAAAA,KAAK,EAAE,CACP;AACE,WAAGE,KAAK,CAACF,KAFJ,EAEWG,MAAM,CAACE,IAFlB;AAJF,OAAP;AAQF;AACA;;AACA;AACE,aAAOH,KAAP;AA3BJ;AA6BD,CA/BD;;AAiCA,eAAeF,KAAf,C,CAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AAII;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["const initialState = {\n  users: [],\n  loading: true,\n};\n\n// Use the initialState as a default value\nconst users = (state = initialState, action) => {\n// The reducer normally looks at the action type field to decide what happens\n  switch (action.type) {\n    case \"LOADING\":\n      return {\n        ...state,\n        loading: true,\n      };\n    case \"SET_USERS\": \n      return {\n        ...state,\n        loading: false,\n        users: action.users,\n      };\n    state.loading = false;\n    state.users = action.users;\n    case \"ADD_USER\":\n      // We need to return a new state object\n      return {\n        // that has all the existing state data\n        ...state,\n        // but has a new array for the `users` field\n        users: [\n        // with all of the old users, and the new user object\n          ...state.users, action.user],\n      };\n    // If this reducer doesn't recognize the action type, or doesn't\n    // care about this specific action, return the existing state unchanged\n    default:\n      return state;\n  }\n};\n\nexport default users;\n\n\n\n// REACT/REDUX flow...\n// A Component dispatches an action.\n// An Action hits the reducer.\n// The Reducer will update the state depending on the action that was dispatched.\n// The Reducer will pass the updated state to the store.\n// The Component will receive new state.\n\n\n\n// export default function users(state = {\n//   users: []\n// }, action) {\n//   switch (action.type) {\n\n//     case 'ADD_USER':\n//       return {\n//         ...state,\n//         users: [...state.users, action.user]\n//       }\n\n//     default:\n//       return state;\n\n//   }\n// };\n\n\n\n// case \"ADD_USER\":\n//   return {\n//     ...state,\n//     users: [...state.users, action.user],\n//   };\n\n\n\n// state.users.lastIndexOf(user => user.id && action.id)\n\n\n\n    // case \"SHOW_USER\":\n    //   return {\n    //     ...state,\n    //     users: [...state.users.slice(-1)]\n    //   };\n    // // frontend difficulty recognizing the user\n    // case \"FETCH_USER_DETAILS\":\n    //   return {\n    //     id: action.user.id,\n    //     email: action.user.email,\n    //     username: action.user.username,\n    //   };"]},"metadata":{},"sourceType":"module"}